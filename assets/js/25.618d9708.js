(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{300:function(t,s,a){t.exports=a.p+"assets/img/html.8e055bfb.png"},320:function(t,s,a){"use strict";a.r(s);var v=a(14),_=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),s("h2",{attrs:{id:"_1-浏览器展示html文件的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器展示html文件的过程"}},[t._v("#")]),t._v(" 1.浏览器展示html文件的过程")]),t._v(" "),s("p",[s("img",{attrs:{src:a(300),alt:"浏览器展示html文件的过程"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("HTML内容被HTML解析器解析生成DOM树")])]),t._v(" "),s("li",[s("p",[t._v("CSS内容被CSS解析器解析生产CSSOM树（CSSOM树生成之后开始执行js文件暂定DOM树解析）")])]),t._v(" "),s("li",[s("p",[t._v("DOM树+CSSOM树会生产Render Tree（渲染树）")])]),t._v(" "),s("li",[s("p",[t._v("生成布局，浏览器根据渲染树来布局，以计算每个节点的几何信息")])]),t._v(" "),s("li",[s("p",[t._v("将各个节点绘制到屏幕上")])])]),t._v(" "),s("h2",{attrs:{id:"_2-重排与重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-重排与重绘"}},[t._v("#")]),t._v(" 2.重排与重绘")]),t._v(" "),s("ul",[s("li",[t._v("重绘：元素的外观被改变，例如：元素的背景颜色发生变化")]),t._v(" "),s("li",[t._v("重排：重新生成布局，重新排列元素，例如：元素的尺寸、位置发生变化")])]),t._v(" "),s("h3",{attrs:{id:"_2-1-重排-reflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-重排-reflow"}},[t._v("#")]),t._v(" 2.1 重排(Reflow)")]),t._v(" "),s("blockquote",[s("p",[t._v("当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做"),s("strong",[t._v("重排")]),t._v("。")])]),t._v(" "),s("p",[s("em",[t._v("重排也叫做"),s("strong",[t._v("回流")])])]),t._v(" "),s("p",[s("strong",[t._v("重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓，重排重绘非常耗费资源，是导致网页性能低下的根本原因。")])]),t._v(" "),s("p",[t._v("我们应尽量减少重排，最简单的方式是：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("缩小重排范围")]),t._v(" "),s("ul",[s("li",[t._v("应该尽量以局部布局的形式组织HTML结构，使各个结构间相互独立，当某个结构发生重排时，不会影响到页面上的其它结构")]),t._v(" "),s("li",[t._v("应该尽可能在底层级的元素上设置样式，削弱修改样式时，对页面其它元素带来影响")]),t._v(" "),s("li",[t._v("不要使用table布局，可能很小的一个小改动会造成整个table的重新布局")])])]),t._v(" "),s("li",[s("p",[t._v("减少重排次数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("通过"),s("code",[t._v("documentFragment")]),t._v("创建一个 "),s("code",[t._v("dom")]),t._v(" 碎片,在它上面批量操作 "),s("code",[t._v("dom")]),t._v("，操作完成之后，再添加到文档中，这样只会触发一次重排")])]),t._v(" "),s("li",[s("p",[t._v("使用 absolute 或 fixed 脱离文档流：使用 "),s("code",[t._v("absolute")]),t._v(" 或 "),s("code",[t._v("fixed")]),t._v(" 脱离文档流使用绝对定位会使的该元素单独成为渲染树中 "),s("code",[t._v("body")]),t._v(" 的一个子元素，重排开销比较小，不会对其它节点造成太多影响")])]),t._v(" "),s("li",[s("p",[t._v("分离读写操作：DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad 强制刷新 触发四次重排+重绘")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetLeft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetBottom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good 缓存布局信息 相当于读写分离 触发一次重排+重绘")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" curLeft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetLeft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" curTop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" curRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" curBottom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetBottom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),s("h3",{attrs:{id:"_2-2-重绘-repaints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-重绘-repaints"}},[t._v("#")]),t._v(" 2.2 重绘(Repaints)")]),t._v(" "),s("blockquote",[s("p",[t._v("当一个元素的外观发生改变，但没有改变布局，浏览器重新把元素的外观绘制出来的过程，叫做"),s("strong",[t._v("重绘")]),t._v("。")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("重排必定会引发重绘，但重绘不一定会引发重排")])])]),t._v(" "),s("h2",{attrs:{id:"_3-浏览器的渲染过程以及网页性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器的渲染过程以及网页性能优化"}},[t._v("#")]),t._v(" 3. 浏览器的渲染过程以及网页性能优化")]),t._v(" "),s("p",[s("strong",[t._v("渲染过程")])]),t._v(" "),s("ol",[s("li",[t._v("解析 HTML：浏览器会将 HTML 代码解析成 DOM 树，根据 DOM 结构创建节点对象，同时解析 CSS 和 JavaScript，生成 CSSOM 和 JavaScript 对象模型。")]),t._v(" "),s("li",[t._v("构建渲染树：浏览器会根据 DOM 和 CSSOM 构建渲染树，它是由可见的文档对象组成的树形结构，其中每个节点都是一个渲染对象。")]),t._v(" "),s("li",[t._v("布局和绘制：浏览器会根据渲染树的结构和样式信息进行布局和绘制。布局是指计算出每个节点在屏幕上的位置和大小，绘制是指将节点的内容绘制在屏幕上。这个过程也称为“重排”和“重绘”。")]),t._v(" "),s("li",[t._v("合成和显示：浏览器会将绘制好的图像传递给 GPU，GPU 会将图像合成为页面，并在屏幕上显示出来。")])]),t._v(" "),s("p",[s("strong",[t._v("优化")])]),t._v(" "),s("ol",[s("li",[t._v("减少 DOM 操作和重绘：DOM 操作和重绘会触发浏览器的渲染过程，因此过多的操作会影响性能。可以通过一些技术，如事件委托、批量修改样式等来减少操作次数。")]),t._v(" "),s("li",[t._v("使用 CSS3 动画和过渡：CSS3 动画和过渡可以由浏览器的 GPU 加速，因此比 JavaScript 动画性能更好。")]),t._v(" "),s("li",[t._v("压缩和合并代码：将多个 CSS 或 JavaScript 文件压缩和合并成一个文件，可以减少请求次数和文件大小。")]),t._v(" "),s("li",[t._v("使用缓存：将静态资源缓存在客户端，可以减少请求次数和带宽占用，提高网站的访问速度。")]),t._v(" "),s("li",[t._v("优化图片：使用合适的图片格式和压缩算法，可以减少图片大小和加载时间。")])]),t._v(" "),s("h2",{attrs:{id:"_4-什么是bfc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是bfc"}},[t._v("#")]),t._v(" 4. 什么是BFC")]),t._v(" "),s("p",[t._v("BFC是块格式化上下文（Block Formatting Context）的缩写，它是Web页面中用于布局和定位HTML元素的一种CSS渲染机制。BFC是一个隔离的容器，在 BFC 内部，浮动元素会受到限制，即不会溢出容器，并且块级元素在垂直方向上按照一定规则排列，可以防止 margin 重叠等问题。")]),t._v(" "),s("p",[t._v("在BFC中，会创建新的块级格式化上下文，并定义了一些规则来控制其中元素的布局和表现。一些常见的创建BFC的方式包括：")]),t._v(" "),s("ul",[s("li",[t._v("根元素")]),t._v(" "),s("li",[t._v("浮动元素（float属性不为none）")]),t._v(" "),s("li",[t._v("绝对定位元素（position属性为absolute或fixed）")]),t._v(" "),s("li",[t._v("display属性值为inline-block、table-cell、table-caption、flex、inline-flex等")])]),t._v(" "),s("p",[t._v("BFC的作用在于可以帮助开发者更好地控制页面元素的布局和显示效果，减少因为元素相互干扰而产生的错误和布局问题。")]),t._v(" "),s("h2",{attrs:{id:"_5-常见网络请求状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-常见网络请求状态码"}},[t._v("#")]),t._v(" 5.常见网络请求状态码")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("200")]),t._v(" OK：表示服务器成功处理了请求，并返回对应的资源。")]),t._v(" "),s("li",[s("strong",[t._v("301")]),t._v(" Moved Permanently：表示请求的资源已被永久移动到新位置，客户端需要使用新的URL进行访问。")]),t._v(" "),s("li",[s("strong",[t._v("302")]),t._v(" Found：表示请求的资源已被暂时移动到新位置，客户端需要使用新的URL进行访问。与301状态码不同之处在于，302状态码表示资源只是暂时被移动，将来可能会恢复原来的位置。")]),t._v(" "),s("li",[s("strong",[t._v("400")]),t._v(" Bad Request：表示客户端发出了一个错误的请求，服务器无法理解。")]),t._v(" "),s("li",[s("strong",[t._v("401")]),t._v(" Unauthorized：表示请求未经授权，需要有效的身份验证才能访问所需的资源。")]),t._v(" "),s("li",[s("strong",[t._v("403")]),t._v(" Forbidden：表示服务器拒绝了客户端的请求，因为客户端没有访问该资源的权限。")]),t._v(" "),s("li",[s("strong",[t._v("404")]),t._v(" Not Found：表示请求的资源在服务器上不存在。")]),t._v(" "),s("li",[s("strong",[t._v("500")]),t._v(" Internal Server Error：表示服务器在处理请求时发生了意外的错误，导致无法完成客户端的请求。")])]),t._v(" "),s("h2",{attrs:{id:"_6-tcp和udp协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-tcp和udp协议"}},[t._v("#")]),t._v(" 6. TCP和UDP协议")]),t._v(" "),s("p",[t._v("TCP（传输控制协议）和UDP（用户数据报协议）是两种常用的互联网传输协议。")]),t._v(" "),s("p",[t._v("TCP是一种面向连接、可靠的传输协议，它通过三次握手建立连接，并且在数据传输过程中进行错误校验和重传，确保数据的准确性和完整性。TCP适用于对数据传输质量要求较高的场景，如文件传输、电子邮件等。")]),t._v(" "),s("p",[t._v("UDP是一种无连接、不可靠的传输协议，它不需要建立连接和维护状态，只是简单地将数据包发送出去，因此速度相对较快，但可能会存在数据传输丢失或乱序的情况。UDP适用于实时通信和流媒体等场景，如在线游戏、视频直播等。")]),t._v(" "),s("h2",{attrs:{id:"_7-说说跨域问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-说说跨域问题"}},[t._v("#")]),t._v(" 7. 说说跨域问题")]),t._v(" "),s("p",[t._v("跨域是指浏览器的同源策略限制下，一个域下的网页无法获取另一个域下的资源。这里的 “域” 指的是协议、域名、端口都相同。\n跨域问题产生的原因主要是出于浏览器的安全考虑，防止恶意网站通过脚本获取其他网站的敏感信息。\n"),s("strong",[t._v("常见的跨域解决方案有以下几种：")])]),t._v(" "),s("ol",[s("li",[t._v("JSONP：利用 "),s("code",[t._v("<script>")]),t._v(" 标签的跨域能力，通过动态创建 "),s("code",[t._v("<script>")]),t._v(" 标签并指定回调函数来获取数据。但只能支持 GET 请求。")]),t._v(" "),s("li",[t._v("CORS（跨域资源共享）：这是一种规范，服务器通过在响应头中设置特定字段，如 Access-Control-Allow-Origin 等，来允许跨域请求。支持各种 HTTP 方法。")]),t._v(" "),s("li",[t._v("代理服务器：通过在同源的服务器端转发请求，来规避浏览器的跨域限制。")])])])}),[],!1,null,null,null);s.default=_.exports}}]);