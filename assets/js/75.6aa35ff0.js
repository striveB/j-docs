(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{365:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"进阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进阶"}},[t._v("#")]),t._v(" 进阶")]),t._v(" "),s("h2",{attrs:{id:"项目结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),s("p",[t._v("Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("应用层级的状态应该集中到单个 store 对象中。")])]),t._v(" "),s("li",[s("p",[t._v("提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。")])]),t._v(" "),s("li",[s("p",[t._v("异步逻辑都应该封装到 action 里面。")])])]),t._v(" "),s("p",[t._v("如果 store 文件太大时，只需将 action、mutation 和 getter 分割到单独的文件。")]),t._v(" "),s("p",[t._v("对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：")]),t._v(" "),s("div",{staticClass:"language-scheme extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scheme"}},[s("code",[t._v("├── index.html\n├── main.js\n├── api\n│   └── ... # 抽取出API请求\n├── components\n│   ├── App.vue\n│   └── ...\n└── store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    └── modules\n        ├── cart.js       # 购物车模块\n        └── products.js   # 产品模块\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);