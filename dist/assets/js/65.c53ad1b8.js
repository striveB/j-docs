(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{355:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"探索响应式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#探索响应式"}},[t._v("#")]),t._v(" 探索响应式")]),t._v(" "),s("p",[t._v("响应式是vue的重要组成部分，当我们在页面中引用了某个变量，之后再改变这个变量的时候页面也会随之改变，这就是响应式的作用。")]),t._v(" "),s("p",[t._v("响应式的核心就是拦截对象属性的读取和设置的操作，在ES2015之前只能通过"),s("code",[t._v("Object.defineProperty")]),t._v("函数实现，这也是vue2所在用的方法，在ES2015+中我们可以使用代理对象"),s("code",[t._v("Proxy")]),t._v("来实现，这也是vue3采用的方式。")]),t._v(" "),s("p",[t._v("下面我们就来探索vue3的响应式实现原理。")]),t._v(" "),s("h2",{attrs:{id:"页面更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面更新"}},[t._v("#")]),t._v(" 页面更新")]),t._v(" "),s("p",[t._v("如果仅仅是实现对象属性改变之后页面随之改变的效果的话其实很简单，我们看下面代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'小俊'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("当"),s("code",[t._v("effect")]),t._v("函数被调用之后页面将会被插入"),s("code",[t._v("obj.name")]),t._v("的值："),s("strong",[t._v("小俊")])]),t._v(" "),s("p",[t._v("现在我们想要实现改变"),s("code",[t._v("obj.name")]),t._v("的值之后页面内容也随之改变，我们可以这样：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'大俊'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("当我们修改"),s("code",[t._v("obj.name")]),t._v("的值之后再次调用"),s("code",[t._v("effect")]),t._v("函数，这样页面就可以更新为最新数据了。")]),t._v(" "),s("p",[t._v("这样虽然是实现了但是一点也不智能，我们每次都要手动的去调用函数，下面我们来想一下怎么去改进它。")]),t._v(" "),s("p",[t._v("从这个例子我们其实可以看出来，只要我们在改变对象属性之后再次调用这个对象属性所依赖的函数，其实就可以实现响应式的效果了。所以我们现在应该考虑怎样在对象属性修改之后自动的调用它所依赖的函数。")]),t._v(" "),s("p",[t._v("这里就引出了上面提到的拦截对象属性的读取和设置的操作，这时我们就应该可以联想到，我们可以把当前读取对象属性（"),s("code",[t._v("obj.name")]),t._v("）的函数（"),s("code",[t._v("effect")]),t._v("函数）给存起来，之后我们设置对象属性（"),s("code",[t._v("obj.name = '大俊'")]),t._v("）时再把存储好的依赖函数拿出来在调用一遍就行了，这样我们就自动化的实现了上边的功能。")]),t._v(" "),s("p",[t._v("总结起来就是：")]),t._v(" "),s("ul",[s("li",[t._v("当依赖函数"),s("code",[t._v("effect")]),t._v("执行时，会触发"),s("code",[t._v("obj.name")]),t._v("的"),s("strong",[t._v("读取操作")]),t._v("，之后将"),s("code",[t._v("effect")]),t._v("函数存储起来。")]),t._v(" "),s("li",[t._v("当修改"),s("code",[t._v("obj.name")]),t._v("的值时，会触发"),s("code",[t._v("obj.name")]),t._v("的"),s("strong",[t._v("设置操作")]),t._v("，之后再将"),s("code",[t._v("effect")]),t._v("函数拿出来执行一遍。")])]),t._v(" "),s("p",[t._v("想要拦截对象属性的读取和设置操作，我们使用Proxy代理对象来实现。")]),t._v(" "),s("h2",{attrs:{id:"了解proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解proxy"}},[t._v("#")]),t._v(" 了解Proxy")]),t._v(" "),s("p",[t._v("下面我们先来了解Proxy的使用，看下面代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'小俊'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用user中的属性时会调用该方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// target: 调用对象，key: 调用的属性名")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把调用的属性值还返回回去")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改user中的属性时会调用该方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// target: 调用对象，key: 调用的属性名，value: 要修改的值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行修改操作")]),t._v("\n    \ttarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n    \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回true表示修改成功")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数执行后会调用get方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'大俊'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时会执行set方法")]),t._v("\n")])])]),s("p",[t._v("至此我们已经知道了Proxy的使用，并且清楚了"),s("code",[t._v("get")]),t._v("、"),s("code",[t._v("set")]),t._v("的执行时机，以及大致的实现思路，在下一节中我们将利用这些来实现一个基础的响应式数据。")])])}),[],!1,null,null,null);s.default=e.exports}}]);