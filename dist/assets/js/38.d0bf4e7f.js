(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{325:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第三章-变量、数据类型、控制语句、函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-变量、数据类型、控制语句、函数"}},[t._v("#")]),t._v(" 第三章 - 变量、数据类型、控制语句、函数")]),t._v(" "),s("h2",{attrs:{id:"_3-1-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-语法"}},[t._v("#")]),t._v(" 3.1 语法")]),t._v(" "),s("p",[t._v("ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-1-区分大小写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-区分大小写"}},[t._v("#")]),t._v(" 3.1.1 区分大小写")]),t._v(" "),s("p",[t._v("首先要知道的是，"),s("strong",[t._v("ECMAScript 中一切都区分大小写")]),t._v("。无论是"),s("strong",[t._v("变量")]),t._v("、"),s("strong",[t._v("函数名")]),t._v("还是"),s("strong",[t._v("操作符")]),t._v("，都区分大小写。换句话说，变量 test 和变量 Test 是两个不同的变量。类似地，"),s("code",[t._v("typeof")]),t._v("不能作为函数名，因为它是一个关键字。但 Typeof 是一个完全有效的函数名。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-2-标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-标识符"}},[t._v("#")]),t._v(" 3.1.2 标识符")]),t._v(" "),s("p",[t._v("所谓标识符，就是"),s("strong",[t._v("变量")]),t._v("、"),s("strong",[t._v("函数")]),t._v("、"),s("strong",[t._v("属性")]),t._v("或"),s("strong",[t._v("函数参数")]),t._v("的名称。")]),t._v(" "),s("p",[t._v("标识符可以由一或多个下列字符组成：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("第一个字符必须是一个"),s("code",[t._v("字母")]),t._v("、"),s("code",[t._v("下划线(_)")]),t._v("或"),s("code",[t._v("美元符号($)")])])]),t._v(" "),s("li",[s("p",[t._v("剩下的其他字符可以是"),s("code",[t._v("字母")]),t._v("、"),s("code",[t._v("下划线")]),t._v("、"),s("code",[t._v("美元符号")]),t._v("或"),s("code",[t._v("数字")])])])]),t._v(" "),s("p",[t._v("按照惯例，ECMAScript 标识符使用"),s("strong",[t._v("驼峰大小写形式")]),t._v("，即第一个单词的首字母小写，后面每个单词的首字母大写，如")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" firstSecond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myCar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" doSomethingImportant"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("虽然这种写法并不是强制性的，但因为这种形式跟 ECMAScript "),s("strong",[t._v("内置函数")]),t._v("和"),s("strong",[t._v("对象")]),t._v("的命名方式一致，所以算是最佳实践。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("关键字、保留字、true、false 和 null 不能作为标识符。")])]),t._v(" "),s("h3",{attrs:{id:"_3-1-3-注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-注释"}},[t._v("#")]),t._v(" 3.1.3 注释")]),t._v(" "),s("p",[t._v("ECMAScript 采用 C 语言风格的注释，包括"),s("strong",[t._v("单行注释")]),t._v("和"),s("strong",[t._v("块注释")]),t._v("。")]),t._v(" "),s("p",[t._v("单行注释：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单行注释")]),t._v("\n")])])]),s("p",[t._v("块注释：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* \n这是多行\n注释\n*/")]),t._v(" \n")])])]),s("h3",{attrs:{id:"_3-1-4-严格模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-严格模式"}},[t._v("#")]),t._v(" 3.1.4 "),s("span",{attrs:{id:"严格模式"}},[t._v("严格模式")])]),t._v(" "),s("p",[s("strong",[t._v("ECMAScript 5")]),t._v("增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。要对整个脚本启用严格模式，在脚本开头加上这一行：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"use strict"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("虽然看起来像个没有赋值给任何变量的字符串，但它其实是一个"),s("strong",[t._v("预处理指令")]),t._v("。任何支持的 JavaScript引擎看到它都会切换到严格模式。选择这种语法形式的目的是不破坏 ECMAScript 3 语法。")]),t._v(" "),s("p",[t._v("也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头即可：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"use strict"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("严格模式会影响 JavaScript 执行的很多方面，所有现代浏览器都支持严格模式。")]),t._v(" "),s("h4",{attrs:{id:"严格模式下限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格模式下限制"}},[t._v("#")]),t._v(" 严格模式下限制")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当声明一个变量没有操作符（"),s("code",[t._v("var")]),t._v("、"),s("code",[t._v("let")]),t._v("、"),s("code",[t._v("const")]),t._v("）时会抛出 "),s("code",[t._v("ReferenceError")])])]),t._v(" "),s("li",[s("p",[t._v("不能定义名为 "),s("code",[t._v("eval")]),t._v("和 "),s("code",[t._v("arguments")]),t._v("的变量，否则会导致语法错误")])])]),t._v(" "),s("h2",{attrs:{id:"_3-2-关键字与保留字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-关键字与保留字"}},[t._v("#")]),t._v(" 3.2 关键字与保留字")]),t._v(" "),s("p",[s("strong",[t._v("关键字")]),t._v("：表示控制语句的开始和结束，或者执行特定的操作。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("var")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("void")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("extends")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("       finally     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("debugger")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" \n")])])]),s("p",[s("strong",[t._v("保留字")]),t._v("：虽然保留字在语言中没有特定用途，但它们是保留给将来做关键字用的。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 始终保留: ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 严格模式下保留: ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("package")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("protected")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模块代码中保留: ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v("\n")])])]),s("h2",{attrs:{id:"_3-3-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-变量"}},[t._v("#")]),t._v(" 3.3 变量")]),t._v(" "),s("p",[t._v("ECMAScript 变量是"),s("strong",[t._v("松散类型")]),t._v("的，意思是"),s("strong",[t._v("变量可以用于保存任何类型的数据")]),t._v("。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量："),s("code",[t._v("var")]),t._v("、"),s("code",[t._v("const")]),t._v("和 "),s("code",[t._v("let")]),t._v("。其中，"),s("code",[t._v("var")]),t._v(" 在ECMAScript 的所有版本中都可以使用，而 "),s("code",[t._v("const")]),t._v("和 "),s("code",[t._v("let")]),t._v("只能在 ECMAScript 6 及更晚的版本中使用。")]),t._v(" "),s("p",[s("strong",[t._v("同时声明多个变量")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    found "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("这里定义并初始化了 3 个变量。因为 ECMAScript 是"),s("strong",[t._v("松散类型")]),t._v("的，所以使用不同数据类型初始化的变量可以用一条语句来声明。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("在"),s("a",{attrs:{href:"#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F"}},[t._v("严格模式")]),t._v("下，不能定义名为 "),s("code",[t._v("eval")]),t._v("和 "),s("code",[t._v("arguments")]),t._v("的变量，否则会导致语法错误。")])]),t._v(" "),s("h3",{attrs:{id:"_3-3-1-var变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-var变量提升"}},[t._v("#")]),t._v(" 3.3.1 var变量提升")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("var")]),t._v("时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("p",[t._v("之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined ")]),t._v("\n")])])]),s("p",[t._v("这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-2-let声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-let声明"}},[t._v("#")]),t._v(" 3.3.2 let声明")]),t._v(" "),s("p",[s("code",[t._v("let")]),t._v("跟"),s("code",[t._v("var")]),t._v("的作用差不多，但有着非常重要的区别。最明显的区别是，"),s("strong",[s("code",[t._v("let")]),t._v("声明的范围是块作用域")]),t._v("，而 "),s("strong",[s("code",[t._v("var")]),t._v("声明的范围是函数作用域")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Matt ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Matt")]),t._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 26 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: age 没有定义")]),t._v("\n")])])]),s("p",[t._v("在这里，age 变量之所以不能在 "),s("code",[t._v("if")]),t._v("块外部被引用，是因为它的作用域仅限于该块内部。"),s("strong",[t._v("块作用域是函数作用域的子集，因此适用于 "),s("code",[t._v("var")]),t._v("的作用域限制同样也适用于"),s("code",[t._v("let")]),t._v("。")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("let")]),t._v("也不允许同一个块作用域中出现冗余声明")]),t._v("。这样会导致报错：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译通过")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError；标识符 age 已经声明过了")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-3-2-1-暂时性死区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-1-暂时性死区"}},[t._v("#")]),t._v(" 3.3.2.1 暂时性死区")]),t._v(" "),s("p",[s("code",[t._v("let")]),t._v("与 "),s("code",[t._v("var")]),t._v("的另一个重要的区别，就是 "),s("code",[t._v("let")]),t._v("声明的变量不会在作用域中被提升。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name 会被提升")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// age 不会被提升")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError：age 没有定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("在解析代码时，JavaScript 引擎也会注意出现在块后面的 "),s("code",[t._v("let")]),t._v("声明，只不过在此之前不能以任何方式来引用未声明的变量。在 "),s("code",[t._v("let")]),t._v("声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此阶段引用任何后面才声明的变量都会抛出"),s("code",[t._v("ReferenceError")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"_3-3-2-2-for循环中的let声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-2-for循环中的let声明"}},[t._v("#")]),t._v(" 3.3.2.2 for循环中的let声明")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("let")]),t._v("出现之前，"),s("code",[t._v("for")]),t._v("循环定义的迭代变量会渗透到循环体外部：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环逻辑 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])])]),s("p",[t._v("改成使用 "),s("code",[t._v("let")]),t._v("之后，这个问题就消失了，因为迭代变量的作用域仅限于 "),s("code",[t._v("for")]),t._v("循环块内部：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环逻辑")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: i 没有定义")]),t._v("\n")])])]),s("p",[t._v("在使用 "),s("code",[t._v("var")]),t._v("的时候，最常见的问题就是对迭代变量的奇特声明和修改：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 你可能以为会输出 0、1、2、3、4 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际上会输出 5、5、5、5、5 ")]),t._v("\n")])])]),s("p",[t._v("之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。")]),t._v(" "),s("p",[t._v("而在使用 "),s("code",[t._v("let")]),t._v("声明迭代变量时，JavaScript 引擎在后台会"),s("strong",[t._v("为每个迭代循环声明一个新的迭代变量")]),t._v("。每个 "),s("code",[t._v("setTimeout")]),t._v("引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会输出 0、1、2、3、4 ")]),t._v("\n")])])]),s("p",[t._v("这种每次迭代声明一个独立变量实例的行为适用于所有风格的 "),s("code",[t._v("for")]),t._v("循环，包括 "),s("code",[t._v("for-in")]),t._v("和"),s("code",[t._v("for-of")]),t._v("循环。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-3-const声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-const声明"}},[t._v("#")]),t._v(" 3.3.3 const声明")]),t._v(" "),s("p",[s("code",[t._v("const")]),t._v("的行为与 "),s("code",[t._v("let")]),t._v("基本相同，也是块作用域，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 "),s("code",[t._v("const")]),t._v("声明的变量会导致运行时错误。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError: 给常量赋值")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const 也不允许重复声明")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nicholas'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError ")]),t._v("\n")])])]),s("p",[s("code",[t._v("const")]),s("strong",[t._v("声明的限制只适用于它指向的变量的引用")]),t._v("。换句话说，如果 "),s("code",[t._v("const")]),t._v("变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-4-声明风格及最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-声明风格及最佳实践"}},[t._v("#")]),t._v(" 3.3.4 声明风格及最佳实践")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("不使用"),s("code",[t._v("var")])])]),t._v(" "),s("p",[t._v("限制自己只使用"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("const")]),t._v("有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("const 优先，let 次之")])]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("const")]),t._v("声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。只在提前知道未来会有修改时，再使用"),s("code",[t._v("let")]),t._v("。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);